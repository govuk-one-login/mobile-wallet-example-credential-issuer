name: Example CRI - Push to Main

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - example-credential-issuer/**
      - .github/workflows/example-credential-issuer-push-to-main.yml

jobs:
  run-code-analysis:
    name: Run code analysis
    runs-on: ubuntu-24.04
    timeout-minutes: 30
    permissions:
      contents: read
      packages: read
    defaults:
      run:
        working-directory: ./example-credential-issuer
    steps:
      - name: Check out repository code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          # Check out the repository with full Git history
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v5
        with:
          java-version: 17
          distribution: 'corretto'
          cache: gradle

      - name: Cache SonarCloud packages
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Gradle packages
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Build and unit test
        run: ./gradlew clean build

      - name: Perform static analysis
        if: ${{ github.actor != 'dependabot[bot]' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew sonar

  deploy:
    name: Deploy
    runs-on: ubuntu-24.04
    timeout-minutes: 60
    needs: run-code-analysis
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        working-directory: ./example-credential-issuer
    steps:
      - name: Check out repository code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          # Check out the repository at the specified branch, tag, or commit
          ref: ${{ inputs.gitRef }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@00943011d9042930efac3dcd3a170e4273319bc8 # v5.1.0
        with:
          role-to-assume: ${{ secrets.GH_ACTIONS_ROLE_ARN }}
          aws-region: eu-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1

      - name: Install Cosign
        uses: sigstore/cosign-installer@faadad0cce49287aee09b3a48701e75088a2c6ad # v4.0.0
        with:
          cosign-release: 'v2.5.2'

      - name: Build, tag and push image to ECR
        env:
          ECR_REGISTRY: "${{ secrets.BUILD_ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com"
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          CONTAINER_SIGN_KMS_KEY: ${{ secrets.CONTAINER_SIGN_KMS_KEY }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA
          cosign sign --key awskms:///${CONTAINER_SIGN_KMS_KEY} $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA

      - name: Set up SAM CLI
        uses: aws-actions/setup-sam@c71dd89d980e49367c70391e8ada4353f52f2800 # v2
        with:
          version: 1.131.0
          use-installer: true

      - name: Update SAM template
        working-directory: ./example-credential-issuer/deploy
        env:
          ECR_REGISTRY: "${{ secrets.BUILD_ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com"
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          echo "Replacing `CONTAINER-IMAGE-PLACEHOLDER` with new ECR image"
          sed -i "s|CONTAINER-IMAGE-PLACEHOLDER|$ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA|" template.yaml

      - name: Validate SAM template
        working-directory: ./example-credential-issuer/deploy
        run: |
          echo "SAM_CLI_TELEMETRY=0" >> $GITHUB_ENV
          sam validate

      - name: Build SAM template
        working-directory: ./example-credential-issuer/deploy
        run: |
          sam build

      - name: Deploy SAM app
        # Upload the built SAM application artifacts to the deployment pipeline S3 bucket
        uses: govuk-one-login/devplatform-upload-action@fda75612a1b0e5a8c84ae7c44a23340e50e5bbde # v3.11.0
        with:
          artifact-bucket-name: ${{ secrets.BUILD_ENV_ARTIFACT_BUCKET_NAME }}
          working-directory: ./example-credential-issuer/deploy
          template-file: .aws-sam/build/template.yaml

  create-release:
    name: Create release
    runs-on: ubuntu-24.04
    needs: [ run-code-analysis, deploy ]
    permissions:
      contents: write
    steps:
      - name: Check out repository code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_tag
        run: echo "version=$(git describe --tags --abbrev=0)" >> "$GITHUB_OUTPUT"

      - name: Create semantic release
        uses: cocogitto/cocogitto-action@390bda87a19bf627e03ad075c67a11e9ddbb7547 # v4.0.0
        id: release
        with:
          command: bump
          args: --auto
          git-user: 'github-actions[bot]'
          git-user-email: 'github-actions[bot]@users.noreply.github.com'

      - name: Check if version was bumped
        id: created
        run: |
          prev=${{ steps.get_tag.outputs.version }}
          new=${{ steps.release.outputs.version }}

          if [ "$prev" = "$new" ]; then
            echo "bump=false" >> "$GITHUB_OUTPUT"
          else
            echo "bump=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Push semantic version tag
        if: steps.created.outputs.bump == 'true'
        run: git push --follow-tags && git push --tags
        shell: bash

      - name: Create GitHub release
        if: steps.created.outputs.bump == 'true'
        uses: softprops/action-gh-release@6da8fa9354ddfdc4aeace5fc48d7f679b5214090 # v2.4.1
        with:
          tag_name: ${{ steps.release.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true

      - name: Log release info
        if: steps.created.outputs.bump == 'true'
        run: |
          echo "New release created: ${{ steps.release.outputs.version }}"