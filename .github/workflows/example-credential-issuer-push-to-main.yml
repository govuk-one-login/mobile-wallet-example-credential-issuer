name: Example CRI - Push to Main

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  run-code-analysis:
    name: Run code analysis
    runs-on: ubuntu-24.04
    timeout-minutes: 30
    permissions:
      contents: read
      packages: read
    defaults:
      run:
        working-directory: ./example-credential-issuer
    permissions:
      contents: read
      packages: read
    steps:
      - name: Check out repository code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          # Check out the repository with full Git history
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'corretto'
          cache: gradle

      - name: Cache SonarCloud packages
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Gradle packages
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Build and unit test
        run: ./gradlew clean build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Perform static analysis
        if: ${{ github.actor != 'dependabot[bot]' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew sonar

  deploy:
    name: Deploy
    runs-on: ubuntu-24.04
    timeout-minutes: 60
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        working-directory: ./example-credential-issuer
    permissions:
      id-token: write
      contents: read
    needs: run-code-analysis
    steps:
      - name: Check out repository code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          # Check out the repository at the specified branch, tag, or commit
          ref: ${{ inputs.gitRef }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a # v4.3.1
        with:
          role-to-assume: ${{ secrets.GH_ACTIONS_ROLE_ARN }}
          aws-region: eu-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1

      - name: Install Cosign
        uses: sigstore/cosign-installer@main
        with:
          cosign-release: 'v2.5.2'

      - name: Build, tag and push image to ECR
        env:
          ECR_REGISTRY: "${{ secrets.BUILD_ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com"
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          CONTAINER_SIGN_KMS_KEY: ${{ secrets.CONTAINER_SIGN_KMS_KEY }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA
          cosign sign --key awskms:///${CONTAINER_SIGN_KMS_KEY} $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA

      - name: Set up SAM CLI
        uses: aws-actions/setup-sam@f664fad9e12492edfc187a31f575537dfbb0ff63 # v2
        with:
          version: 1.131.0
          use-installer: true

      - name: Update SAM template
        working-directory: ./example-credential-issuer/deploy
        env:
          ECR_REGISTRY: "${{ secrets.BUILD_ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com"
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          echo "Replacing `CONTAINER-IMAGE-PLACEHOLDER` with new ECR image"
          sed -i "s|CONTAINER-IMAGE-PLACEHOLDER|$ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA|" template.yaml

      - name: Validate SAM template
        working-directory: ./example-credential-issuer/deploy
        run: |
          echo "SAM_CLI_TELEMETRY=0" >> $GITHUB_ENV
          sam validate

      - name: Build SAM template
        working-directory: ./example-credential-issuer/deploy
        run: |
          sam build

      - name: Deploy SAM app
        # Upload the built SAM application artifacts to the deployment pipeline S3 bucket
        uses: govuk-one-login/devplatform-upload-action@720ddb75fba8951db5a648ebb416eb233f1b6bc9 # v3.10.1
        with:
          artifact-bucket-name: ${{ secrets.BUILD_ENV_ARTIFACT_BUCKET_NAME }}
          working-directory: ./example-credential-issuer/deploy
          template-file: .aws-sam/build/template.yaml