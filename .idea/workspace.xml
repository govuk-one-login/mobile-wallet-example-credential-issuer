<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="af1f21b0-7b76-437b-8874-514b94956fd2" name="Changes" comment="">
      <change beforePath="$PROJECT_DIR$/src/main/java/uk/gov/di/mobile/wallet/cri/credential_offer/CredentialOfferResource.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/uk/gov/di/mobile/wallet/cri/credential_offer/CredentialOfferResource.java" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="ExternalProjectsData">
    <projectState path="$PROJECT_DIR$">
      <ProjectState />
    </projectState>
  </component>
  <component name="ExternalProjectsManager">
    <system id="GRADLE">
      <state>
        <task path="$PROJECT_DIR$">
          <activation />
        </task>
        <projects_view />
      </state>
    </system>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Interface" />
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
    <option name="RESET_MODE" value="HARD" />
  </component>
  <component name="GitHubPullRequestSearchHistory">{
  &quot;lastFilter&quot;: {
    &quot;state&quot;: &quot;OPEN&quot;,
    &quot;assignee&quot;: &quot;ahickmann-gds&quot;
  }
}</component>
  <component name="GithubPullRequestsUISettings">{
  &quot;selectedUrlAndAccountId&quot;: {
    &quot;url&quot;: &quot;git@github.com:govuk-one-login/mobile-wallet-example-credential-issuer.git&quot;,
    &quot;accountId&quot;: &quot;b36b4536-ce4f-4c25-9a1d-66dc8d83813a&quot;
  }
}</component>
  <component name="HighlightingSettingsPerFile">
    <setting file="jar://$USER_HOME$/.gradle/caches/modules-2/files-2.1/ch.qos.logback.access/logback-access-common/2.0.5/ca9a42fa6cf3b003b89de339b48c6b8eff58f5d0/logback-access-common-2.0.5.jar!/ch/qos/logback/access/common/model/processor/LogbackAccessDefaultNestedComponentRegistryRules.class" root0="SKIP_INSPECTION" />
  </component>
  <component name="KubernetesApiPersistence">{}</component>
  <component name="KubernetesApiProvider">{
  &quot;isMigrated&quot;: true
}</component>
  <component name="ProblemsViewState">
    <option name="selectedTabId" value="CurrentFile" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;customColor&quot;: &quot;&quot;,
  &quot;associatedIndex&quot;: 7
}</component>
  <component name="ProjectId" id="2tzlHgOJ1zg4GkdBoUreRQjrNYR" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
    <option name="showMembers" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "Downloaded.Files.Path.Enabled": "false",
    "Gradle.AccessTokenServiceTest (1).executor": "Run",
    "Gradle.AccessTokenServiceTest.Should_Not_Throw_When_JwtVerificationSucceeds.executor": "Run",
    "Gradle.AccessTokenServiceTest.Should_ReturnClaimsSubset_When_JwtVerificationSucceeds.executor": "Run",
    "Gradle.AccessTokenServiceTest.Should_ReturnTokenData_When_JwtVerificationSucceeds.executor": "Run",
    "Gradle.AccessTokenServiceTest.Should_ThrowAccessTokenValidationException_When_AudClaimDoesNotMatchConfig.executor": "Run",
    "Gradle.AccessTokenServiceTest.Should_ThrowAccessTokenValidationException_When_CNonceClaimIsEmpty.executor": "Run",
    "Gradle.AccessTokenServiceTest.Should_ThrowAccessTokenValidationException_When_CNonceClaimIsNull.executor": "Run",
    "Gradle.AccessTokenServiceTest.Should_ThrowAccessTokenValidationException_When_CredentialIdentifierIsEmpty.executor": "Run",
    "Gradle.AccessTokenServiceTest.Should_ThrowAccessTokenValidationException_When_CredentialIdentifiersClaimIsEmpty.executor": "Run",
    "Gradle.AccessTokenServiceTest.Should_ThrowAccessTokenValidationException_When_CredentialIdentifiersClaimIsNull.executor": "Run",
    "Gradle.AccessTokenServiceTest.Should_ThrowAccessTokenValidationException_When_IssClaimDoesNotMatchConfig.executor": "Run",
    "Gradle.AccessTokenServiceTest.Should_ThrowAccessTokenValidationException_When_JwksServiceThrowsKeySourceException.executor": "Run",
    "Gradle.AccessTokenServiceTest.Should_ThrowAccessTokenValidationException_When_KidParamIsNull.executor": "Run",
    "Gradle.AccessTokenServiceTest.Should_ThrowAccessTokenValidationException_When_RequiredClaimIsNull.executor": "Run",
    "Gradle.AccessTokenServiceTest.Should_ThrowAccessTokenValidationException_When_RequiredClaimsAreMissing.executor": "Run",
    "Gradle.AccessTokenServiceTest.Should_ThrowAccessTokenValidationException_When_RequiredClaimsAreNull.executor": "Run",
    "Gradle.AccessTokenServiceTest.Should_ThrowAccessTokenValidationException_When_SignatureVerificationFails.executor": "Run",
    "Gradle.AccessTokenServiceTest.Should_ThrowAccessTokenValidationException_When_SubClaimIsEmpty.executor": "Run",
    "Gradle.AccessTokenServiceTest.Should_ThrowAccessTokenValidationException_When_SubClaimIsNull.executor": "Run",
    "Gradle.AccessTokenServiceTest.Should_ThrowException_When_AlgParamDoesNotMatchConfig.executor": "Run",
    "Gradle.AccessTokenServiceTest.Should_ThrowException_When_CredentialIdentifiers_Claim_Is_Empty.executor": "Run",
    "Gradle.AccessTokenServiceTest.executor": "Run",
    "Gradle.AccessTokenServiceTest.shouldThrowAccessTokenValidationExceptionWhenJwksServiceThrowsKeySourceException.executor": "Run",
    "Gradle.CBOREncoderTest.encode_shouldReturnEncodedBytes.executor": "Run",
    "Gradle.CBOREncoderTest.executor": "Run",
    "Gradle.CamelToSnakeCaseConvertorTest.Should_ConvertPascalCaseToSnakeCase.executor": "Run",
    "Gradle.CamelToSnakeCaseConvertorTest.Should_HandleNumbersInInput.executor": "Run",
    "Gradle.CamelToSnakeCaseConvertorTest.executor": "Run",
    "Gradle.CredentialBuilderTest.Should_Return_Social_Security_Credential.executor": "Run",
    "Gradle.CredentialBuilderTest.Should_Throw_SigningException_When_Kms_Throws_An_Error.executor": "Run",
    "Gradle.CredentialOfferCacheItemBuilderTest.Should_BuildCredentialOfferCacheItem.executor": "Run",
    "Gradle.CredentialOfferCacheItemBuilderTest.executor": "Run",
    "Gradle.CredentialOfferCacheItemTest.should_Create_CredentialOffer_CacheItem.executor": "Run",
    "Gradle.CredentialOfferResourceTest.Should_Return200AndCredentialOfferURL.executor": "Run",
    "Gradle.CredentialOfferResourceTest.Should_Return400_When_CredentialTypeIsInvalid.executor": "Run",
    "Gradle.CredentialOfferResourceTest.Should_Return400_When_DocumentIdIsInvalid.executor": "Run",
    "Gradle.CredentialOfferResourceTest.Should_Return400_When_WalletSubjectIdIsInvalid.executor": "Run",
    "Gradle.CredentialOfferResourceTest.executor": "Run",
    "Gradle.CredentialOfferServiceTest.executor": "Run",
    "Gradle.CredentialOfferTest.Should_SerializeCrdentialConfigurationIdsWithCorrectPropertyName.executor": "Run",
    "Gradle.CredentialOfferTest.Should_SerializeCredentialIssuerWithCorrectPropertyName.executor": "Run",
    "Gradle.CredentialOfferTest.executor": "Run",
    "Gradle.CredentialResourceTest.Should_Return400_When_AuthorizationHeaderIsMissing.executor": "Run",
    "Gradle.CredentialResourceTest.Should_Return401_When_AuthorizationHeaderIsMissing.executor": "Run",
    "Gradle.CredentialResourceTest.Should_Return401_When_AuthorizationHeaderIsNotValidBearerAccessToken.executor": "Run",
    "Gradle.CredentialResourceTest.Should_Return500_When_CredentialServiceThrowsCredentialOfferException.executor": "Run",
    "Gradle.CredentialResourceTest.executor": "Run",
    "Gradle.CredentialResourceTest.should_Return_500_When_CredentialService_Throws_A_CredentialServiceException.executor": "Run",
    "Gradle.CredentialResourceTest.should_Return_500_When_CredentialService_Throws_A_Signing_Exception.executor": "Run",
    "Gradle.CredentialResourceTest.should_Return_500_When_CredentialService_Throws_CredentialServiceException.executor": "Run",
    "Gradle.CredentialServiceTest.Should_BuildBasicCheckCredentialSubject.executor": "Run",
    "Gradle.CredentialServiceTest.Should_BuildBasicCheckCredentialSubjectV2_When_DataModelIsV2.executor": "Run",
    "Gradle.CredentialServiceTest.Should_BuildMDLCredential.executor": "Run",
    "Gradle.CredentialServiceTest.Should_BuildMobileDrivingLicenceCredential.executor": "Run",
    "Gradle.CredentialServiceTest.Should_BuildSocialSecurityCredentialSubjectV1_When_DataModelIsV1.executor": "Run",
    "Gradle.CredentialServiceTest.Should_BuildSocialSecurityCredentialSubjectV2_When_DataModelIsV2.executor": "Run",
    "Gradle.CredentialServiceTest.Should_BuildVeteranCardCredentialSubject_When_DataModelIsV2.executor": "Run",
    "Gradle.CredentialServiceTest.Should_Call_Credential_Builder_With_BasicCheckCredentialSubject_V2.executor": "Run",
    "Gradle.CredentialServiceTest.Should_Call_Credential_Builder_With_SocialSecurityCredentialSubject_V2.executor": "Run",
    "Gradle.CredentialServiceTest.Should_CredentialOfferNotFoundException_When_CredentialOfferIsExpired.executor": "Run",
    "Gradle.CredentialServiceTest.Should_ProofJwtValidationException_When_CredentialOfferNotFound.executor": "Run",
    "Gradle.CredentialServiceTest.Should_ProofJwtValidationException_When_NonceValuesDontMatch.executor": "Run",
    "Gradle.CredentialServiceTest.Should_ReturnCredential.executor": "Run",
    "Gradle.CredentialServiceTest.Should_ReturnCredentialResponse.executor": "Run",
    "Gradle.CredentialServiceTest.Should_Return_Credential.executor": "Run",
    "Gradle.CredentialServiceTest.Should_TProofJwtValidationException_When_NonceValuesDontMatch.executor": "Run",
    "Gradle.CredentialServiceTest.Should_ThrowAccessTokenValidationException_When_WalletSubjectIDsDontMatch.executor": "Run",
    "Gradle.CredentialServiceTest.Should_ThrowCredentialOfferExceptio_When_CredentialOfferHasBeenRedeemed.executor": "Run",
    "Gradle.CredentialServiceTest.Should_ThrowCredentialOfferException_When_CredentialOfferHasBeenRedeemed.executor": "Run",
    "Gradle.CredentialServiceTest.Should_ThrowCredentialOfferException_When_CredentialOfferIsExpired.executor": "Run",
    "Gradle.CredentialServiceTest.Should_ThrowCredentialOfferException_When_SigningExceptionIsThrown.executor": "Run",
    "Gradle.CredentialServiceTest.Should_ThrowCredentialOfferNotFoundException_When_CredentialOfferIsExpired.executor": "Run",
    "Gradle.CredentialServiceTest.Should_ThrowCredentialServiceException_When_CallToDatabaseThrowsError.executor": "Run",
    "Gradle.CredentialServiceTest.Should_ThrowCredentialServiceException_When_DocumentVcTypeIsUnknown.executor": "Run",
    "Gradle.CredentialServiceTest.Should_ThrowDataStoreException_When_CallToDatabaseThrowsError.executor": "Run",
    "Gradle.CredentialServiceTest.Should_ThrowException_When_CredentialIdentifiers_Claim_Is_Empty.executor": "Run",
    "Gradle.CredentialServiceTest.Should_ThrowException_When_CredentialOffer_Is_Expired.executor": "Run",
    "Gradle.CredentialServiceTest.Should_ThrowException_When_CredentialOffer_Not_Found.executor": "Run",
    "Gradle.CredentialServiceTest.Should_ThrowException_When_Nonce_Values_Do_Not_Match.executor": "Run",
    "Gradle.CredentialServiceTest.Should_ThrowException_When_WalletSubjectIDs_Do_Not_Match.executor": "Run",
    "Gradle.CredentialServiceTest.Should_ThrowProofJwtValidationException_When_CredentialOfferNotFound.executor": "Run",
    "Gradle.CredentialServiceTest.Should_ThrowProofJwtValidationException_When_NonceValuesDontMatch.executor": "Run",
    "Gradle.CredentialServiceTest.Should_ThrowRuntimeException_When_DocumentEndpointReturns500.executor": "Run",
    "Gradle.CredentialServiceTest.Should_Throw_CredentialServiceException_When_Blah.executor": "Run",
    "Gradle.CredentialServiceTest.Should_Throw_CredentialServiceException_When_CredentialBuilderThrowsSigningException.executor": "Run",
    "Gradle.CredentialServiceTest.Should_Throw_CredentialServiceException_When_Document_Endpoint_Returns_500.executor": "Run",
    "Gradle.CredentialServiceTest.Should_Throw_CredentialServiceException_When_Document_VcType_Is_Unknown.executor": "Run",
    "Gradle.CredentialServiceTest.Should_Throw_RuntimeException_When_Document_Endpoint_Returns_50.executor": "Run",
    "Gradle.CredentialServiceTest.Should_Throw_RuntimeException_When_Document_Endpoint_Returns_500.executor": "Run",
    "Gradle.CredentialServiceTest.executor": "Run",
    "Gradle.CredentialSubjectMapperTest.executor": "Run",
    "Gradle.DigestIDGeneratorTest.Should_GenerateInitialValueWithinBounds.executor": "Run",
    "Gradle.DigestIDGeneratorTest.Should_GenerateSequentialIdsWithRandomIncrement_When_NextMethodIsCalled.executor": "Run",
    "Gradle.DigestIDGeneratorTest.Should_IncrementValue_When_NextMethodIsCalled.executor": "Run",
    "Gradle.DigestIDGeneratorTest.Should_InitializeConstructorWithRandomIncrement.executor": "Run",
    "Gradle.DigestIDGeneratorTest.Should_InitializeConstructorWithRandomStartingValue.executor": "Run",
    "Gradle.DigestIDGeneratorTest.Should_InitializeConstructorWithRandomValue.executor": "Run",
    "Gradle.DigestIDGeneratorTest.executor": "Run",
    "Gradle.DocumentFactoryTest.Should_BuildDocumentWithCorrectDocumentType.executor": "Run",
    "Gradle.DocumentFactoryTest.Should_BuildDocumentWithIssuerAuthInIssuerSigned.executor": "Run",
    "Gradle.DocumentFactoryTest.Should_BuildDocumentWithOneNamespaceInIssuerSigned.executor": "Run",
    "Gradle.DocumentFactoryTest.Should_BuildISOAndUKNamespaces.executor": "Run",
    "Gradle.DocumentFactoryTest.Should_BuildIssuerSignedItemsForEachFieldInDrivingLicence.executor": "Run",
    "Gradle.DocumentFactoryTest.Should_BuildIssuerSignedItemsForEachFieldInDrivingLicence_ISONamespace.executor": "Run",
    "Gradle.DocumentFactoryTest.Should_BuildIssuerSignedItemsForEachFieldInDrivingLicence_UKNamespace.executor": "Run",
    "Gradle.DocumentFactoryTest.Should_BuildWithCorrectNamespaceInIssuerSigned.executor": "Run",
    "Gradle.DocumentFactoryTest.Should_BuildWithCorrectNamespacesInIssuerSigned.executor": "Run",
    "Gradle.DocumentFactoryTest.Should_IncludeIssuerAuth.executor": "Run",
    "Gradle.DocumentFactoryTest.Should_NotBuildIssuerSignedItemForProvisionalDrivingPrivileges_When_ItsValueIsNull.executor": "Run",
    "Gradle.DocumentFactoryTest.Should_ReturnIssuerSignedWithCorrectNamespacesAndIssuerAuth.executor": "Run",
    "Gradle.DocumentFactoryTest.Should_ReturnIssuerSignedWithExpectedNamespacesAndIssuerAuth.executor": "Run",
    "Gradle.DocumentFactoryTest.executor": "Run",
    "Gradle.DocumentFactoryTest.testBuild.executor": "Run",
    "Gradle.DocumentFactoryTest.testBuildReturnsDocumentWithCorrectDocumentType.executor": "Run",
    "Gradle.Download Sources.executor": "Run",
    "Gradle.DrivingLicenceDocumentTest.Should_CreateInstanceWithoutProvisionalDrivingPrivileges_When_IsNull.executor": "Run",
    "Gradle.DrivingLicenceDocumentTest.Should_CreateInstance_When_DateIsValid.executor": "Run",
    "Gradle.DrivingLicenceDocumentTest.executor": "Run",
    "Gradle.DrivingPrivilegeTest.Should_CreateInstanceWithoutIssueDate_When_IssueDateFormatIsInvalid.executor": "Run",
    "Gradle.DrivingPrivilegeTest.executor": "Run",
    "Gradle.DynamoDbServiceTest.Should_GetCredentialOfferFromCache.executor": "Run",
    "Gradle.DynamoDbServiceTest.Should_SaveCredentialOfferToCache.executor": "Run",
    "Gradle.DynamoDbServiceTest.Should_ThrowDataStoreException_When_ErrorHappensUpdatingCredentialOffer.executor": "Run",
    "Gradle.DynamoDbServiceTest.executor": "Run",
    "Gradle.IssuerSignedCBORSerializerTest.Should_SerializeIssuerAuth.executor": "Run",
    "Gradle.IssuerSignedCBORSerializerTest.Should_SerializeIssuerSignedWithCBORGenerator_MultipleNameSpaces.executor": "Run",
    "Gradle.IssuerSignedCBORSerializerTest.Should_SerializeIssuerSignedWithCBORGenerator_SingleNameSpaceWithMultipleItems.executor": "Run",
    "Gradle.IssuerSignedCBORSerializerTest.executor": "Run",
    "Gradle.IssuerSignedItemFactoryTest.Should_BuildItemsWithDifferentElementTypes.executor": "Run",
    "Gradle.IssuerSignedItemFactoryTest.Should_BuildMultipleItemsWithConsecutiveDigestIDs.executor": "Run",
    "Gradle.IssuerSignedItemFactoryTest.Should_CreateItemWithRandomBytes.executor": "Run",
    "Gradle.IssuerSignedItemFactoryTest.testBuildCreatesItemWithNextDigestID.executor": "Run",
    "Gradle.IssuerSignedItemFactoryTest.testBuildCreatesItemWithProvidedElementIdentifierAndValue.executor": "Run",
    "Gradle.JacksonCBOREncoderProviderTest.Should_ConfigureCBORMapperWithCustomSerializers.executor": "Run",
    "Gradle.JacksonCBOREncoderProviderTest.Should_ConfiguredCBORMapper.executor": "Run",
    "Gradle.JacksonCBOREncoderProviderTest.Should_ReturnCBORMapperWithCustomSerializers.executor": "Run",
    "Gradle.JacksonCBOREncoderProviderTest.Should_ReturnNonNullMapper_When_CBORMapperIsConfigured.executor": "Run",
    "Gradle.JacksonCBOREncoderProviderTest.Should_SerializeIssuerSigned.executor": "Run",
    "Gradle.JacksonCBOREncoderProviderTest.Should_SerializeLocalDate.executor": "Run",
    "Gradle.JacksonCBOREncoderProviderTest.executor": "Run",
    "Gradle.JacksonCBOREncoderProviderTest.testMapperCanSerializeIssuerSigned.executor": "Run",
    "Gradle.LocalDateCBORSerializerTest.Should_SerializeLocalDateWithCBORGenerator.executor": "Run",
    "Gradle.LocalDateCBORSerializerTest.Should_ThrowIllegalArgumentException_When_SerializerIsNonCBORGenerator.executor": "Run",
    "Gradle.LocalDateCBORSerializerTest.executor": "Run",
    "Gradle.LocalDateCBORSerializerTest.testSerializeWithCBORGenerator.executor": "Run",
    "Gradle.MetadataBuilderTest.executor": "Run",
    "Gradle.MetadataBuilderTest.testReturnsCRIMetadata.executor": "Run",
    "Gradle.MetadataResourceTest.executor": "Run",
    "Gradle.MetadataResourceTest.testReturns200.executor": "Run",
    "Gradle.MobileDrivingLicenceServiceTest.Should_CallDocumentFactory_With_DrivingLicenceDocument.executor": "Run",
    "Gradle.MobileDrivingLicenceServiceTest.Should_CreateMobileDrivingLicence.executor": "Run",
    "Gradle.MobileDrivingLicenceServiceTest.Should_CreateMobileDrivingLicence_WithRealDependencies.executor": "Run",
    "Gradle.MobileDrivingLicenceServiceTest.Should_PropagateException_When_CBOREncoderThrows.executor": "Run",
    "Gradle.MobileDrivingLicenceServiceTest.Should_PropagateException_When_CBOREncoderThrowsMDLException.executor": "Run",
    "Gradle.MobileDrivingLicenceServiceTest.Should_PropagateException_When_DocumentFactoryThrows.executor": "Run",
    "Gradle.MobileDrivingLicenceServiceTest.Should_PropagateException_When_DocumentFactoryThrowsMDLException.executor": "Run",
    "Gradle.MobileDrivingLicenceServiceTest.Should_PropagateException_When_NameSpaceFactoryThrowsMDLException.executor": "Run",
    "Gradle.MobileDrivingLicenceServiceTest.Should_ReturnHexEncodedString.executor": "Run",
    "Gradle.MobileDrivingLicenceServiceTest.executor": "Run",
    "Gradle.MobileSecurityObjectFactoryTest.executor": "Run",
    "Gradle.NameSpaceFactoryTest.Should_BuildIssuerSignedItemsForEachFieldInDrivingLicence.executor": "Run",
    "Gradle.NameSpaceFactoryTest.Should_CorrectlyConvertFieldNamesToSnakeCase.executor": "Run",
    "Gradle.NamespaceFactoryTest.Should_BuildAllNamespaces.executor": "Run",
    "Gradle.NamespaceFactoryTest.Should_BuildDocumentWithCorrectDocumentTypeAndIssuerSigned.executor": "Run",
    "Gradle.NamespaceFactoryTest.Should_BuildDocumentWithOneNamespaceInIssuerSigned.executor": "Run",
    "Gradle.NamespaceFactoryTest.Should_BuildISOAndUKNamespaces.executor": "Run",
    "Gradle.NamespaceFactoryTest.Should_BuildIssuerSignedItemsForEachFieldInDrivingLicence.executor": "Run",
    "Gradle.NamespaceFactoryTest.Should_BuildIssuerSignedItemsForEachFieldInDrivingLicence_ISONamespace.executor": "Run",
    "Gradle.NamespaceFactoryTest.Should_BuildIssuerSignedItemsForEachFieldInDrivingLicence_UKNamespace.executor": "Run",
    "Gradle.NamespaceFactoryTest.Should_CorrectlyConvertFieldNamesToSnakeCase.executor": "Run",
    "Gradle.NamespaceFactoryTest.Should_CorrectlyConvertFieldNamesToSnakeCase_UKNamespace.executor": "Run",
    "Gradle.NamespaceFactoryTest.Should_NotBuildIssuerSignedItemForProvisionDrivingPrivileges_When_IsNull.executor": "Run",
    "Gradle.NamespaceFactoryTest.Should_NotBuildIssuerSignedItemForProvisionalDrivingPrivileges_When_ItsValueIsNull.executor": "Run",
    "Gradle.NamespaceFactoryTest.executor": "Run",
    "Gradle.NotificationResourceTest.Should_Return.executor": "Run",
    "Gradle.NotificationResourceTest.Should_Return204_When_RequestIsValid.executor": "Run",
    "Gradle.NotificationResourceTest.Should_Return4001_When_AuthorizationHeaderIsInvalid.executor": "Run",
    "Gradle.NotificationResourceTest.Should_Return400_When_.executor": "Run",
    "Gradle.NotificationResourceTest.Should_Return400_When_NotificationIdIsInvalid.executor": "Run",
    "Gradle.NotificationResourceTest.Should_Return400_When_NotificationServiceThrowsAccessTokenValidationException.executor": "Run",
    "Gradle.NotificationResourceTest.Should_Return400_When_RequestBodyIsInvali.executor": "Run",
    "Gradle.NotificationResourceTest.Should_Return400_When_RequestBodyIsInvalid.executor": "Run",
    "Gradle.NotificationResourceTest.Should_Return401_When_AuthorizationHeaderIsInvalid.executor": "Run",
    "Gradle.NotificationResourceTest.Should_Return500_When_NotificationServiceThrowsAccessTokenValidationException.executor": "Run",
    "Gradle.NotificationResourceTest.Should_Return500_When_NotificationServiceThrowsDataStoreException.executor": "Run",
    "Gradle.NotificationResourceTest.Should_Return500_When_NotificationServiceThrowsInvalidNotificationIdException.executor": "Run",
    "Gradle.NotificationResourceTest.executor": "Run",
    "Gradle.NotificationServiceTest.Should_LogNotification_When_RequestIsValid.executor": "Run",
    "Gradle.NotificationServiceTest.Should_ThrowAccessTokenValidationException_When_CredentialOfferNotFound.executor": "Run",
    "Gradle.NotificationServiceTest.Should_ThrowAccessTokenValidationException_When_WalletSubjectIDsDoNotMatch.executor": "Run",
    "Gradle.NotificationServiceTest.Should_ThrowCredentialOfferException_When_CredentialOfferNotFound.executor": "Run",
    "Gradle.NotificationServiceTest.Should_ThrowInvalidNotificationIdException_When_NotificationIDsDoNotMatch.executor": "Run",
    "Gradle.NotificationServiceTest.Should_VerifyAccessToken.executor": "Run",
    "Gradle.NotificationServiceTest.executor": "Run",
    "Gradle.ProofJwtServiceTest.Should_NotThrow_When_JwtVerificationSucceeds.executor": "Run",
    "Gradle.ProofJwtServiceTest.Should_ProofJwtValidationException_When_AudienceClaimDoesNotMatchConfig.executor": "Run",
    "Gradle.ProofJwtServiceTest.Should_ProofJwtValidationException_When_IssuerClaimDoesNotMatchConfig.executor": "Run",
    "Gradle.ProofJwtServiceTest.Should_ProofJwtValidationException_When_KidParamIsMissing.executor": "Run",
    "Gradle.ProofJwtServiceTest.Should_ReturnTokenData_When_JwtVerificationSucceeds.executor": "Run",
    "Gradle.ProofJwtServiceTest.Should_ThrowProofJwtValidationException_When_DidKeyIsInvalid.executor": "Run",
    "Gradle.ProofJwtServiceTest.Should_ThrowProofJwtValidationException_When_SignatureVerificationFails.executor": "Run",
    "Gradle.ProofJwtServiceTest.executor": "Run",
    "Gradle.ProofJwtServiceTest.should_Not_ThrowError_When_JwtVerification_Succeeds.executor": "Run",
    "Gradle.ProofJwtServiceTest.should_ThrowException_When_AudienceClaim_Does_Not_Match_Config.executor": "Run",
    "Gradle.ProofJwtServiceTest.should_ThrowException_When_DidKey_Is_Invalid.executor": "Run",
    "Gradle.ProofJwtServiceTest.should_ThrowException_When_IssuerClaim_Does_Not_Match_Config.executor": "Run",
    "Gradle.ProofJwtServiceTest.should_ThrowException_When_JwtHeader_Alg_Does_Not_Match_Config.executor": "Run",
    "Gradle.ProofJwtServiceTest.should_ThrowException_When_JwtHeader_Kid_Is_Null.executor": "Run",
    "Gradle.ProofJwtServiceTest.should_ThrowException_When_RequiredClaims_Are_Null.executor": "Run",
    "Gradle.ProofJwtServiceTest.should_ThrowException_When_SignatureVerification_Failed.executor": "Run",
    "Gradle.ServicesFactoryTest.createReturnsServicesInstance.executor": "Run",
    "Gradle.ServicesFactoryTest.create_returnsServicesInstanceWithNonNullDependencies.executor": "Run",
    "Gradle.ServicesFactoryTest.executor": "Run",
    "Gradle.ServicesTest.executor": "Run",
    "Gradle.ValueDigestsFactoryTest.Should_AddMultipleNameSpacesWithMultipleDigests.executor": "Run",
    "Gradle.ValueDigestsFactoryTest.Should_AddMultipleNameSpacesWithSingleDigest.executor": "Run",
    "Gradle.ValueDigestsFactoryTest.Should_AddSingleNameSpaceWithSingleDigest.executor": "Run",
    "Gradle.ValueDigestsFactoryTest.Should_ThrowMDLExceptionOnIoException.executor": "Run",
    "Jest.issueDocumentSigningCertificate handler.When processing starts.executor": "Run",
    "Jest.issueDocumentSigningCertificate handler.When processing starts.issues a certificate.executor": "Run",
    "Jest.issueDocumentSigningCertificate handler.When processing starts.should emit an error and reject if the certificate has already been issued for this key.executor": "Run",
    "Jest.issueDocumentSigningCertificate handler.When processing starts.should log a message and continue when the root certificate already exists.executor": "Run",
    "Jest.issueDocumentSigningCertificate handler.When processing starts.should log a message and upload root certificate when it doesn\\'t exist.executor": "Run",
    "Jest.issueDocumentSigningCertificate handler.When processing starts.should log and continue when the root certificate already exists.executor": "Run",
    "Jest.issueDocumentSigningCertificate handler.When processing starts.should log and continue when the root certificate has already been uploaded.executor": "Run",
    "Jest.issueDocumentSigningCertificate handler.executor": "Run",
    "ModuleVcsDetector.initialDetectionPerformed": "true",
    "Repository.Attach.Annotations": "false",
    "Repository.Attach.JavaDocs": "false",
    "Repository.Attach.Sources": "false",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "RunOnceActivity.git.unshallow": "true",
    "git-widget-placeholder": "main",
    "kotlin-language-version-configured": "true",
    "last_opened_file_path": "/Users/ahickmann/Projects/gds/mobile-wallet-example-credential-issuer/.github/workflows",
    "node.js.detected.package.eslint": "true",
    "node.js.detected.package.tslint": "true",
    "node.js.selected.package.eslint": "(autodetect)",
    "node.js.selected.package.tslint": "(autodetect)",
    "nodejs.jest.jest_package": "/Users/ahickmann/Projects/gds/mobile-wallet-example-credential-issuer/doc-signing-cert/issue-document-signing-certificate/node_modules/jest",
    "nodejs_package_manager_path": "npm",
    "project.structure.last.edited": "Modules",
    "project.structure.proportion": "0.0",
    "project.structure.side.proportion": "0.0",
    "settings.editor.selected.configurable": "preferences.pluginManager",
    "ts.external.directory.path": "/Users/ahickmann/Projects/gds/mobile-wallet-example-credential-issuer/doc-signing-cert/issue-document-signing-certificate/node_modules/typescript/lib",
    "vue.rearranger.settings.migration": "true"
  }
}]]></component>
  <component name="RecentsManager">
    <key name="CreateClassDialog.RecentsKey">
      <recent name="uk.gov.di.mobile.wallet.cri.credential.mobile_driving_licence.cbor" />
      <recent name="uk.gov.di.mobile.wallet.cri.notification" />
    </key>
    <key name="CopyFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/.github/workflows" />
      <recent name="$PROJECT_DIR$/src/main/resources" />
      <recent name="$PROJECT_DIR$/src/main/java/uk/gov/di/mobile/wallet/cri/iacas" />
      <recent name="$PROJECT_DIR$/src/main/java/uk/gov/di/mobile/wallet/cri" />
      <recent name="$PROJECT_DIR$/src/main/java" />
    </key>
    <key name="MoveFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/doc-signing-cert" />
      <recent name="$PROJECT_DIR$/doc-signing-cert/deploy" />
      <recent name="$PROJECT_DIR$/deploy" />
      <recent name="$PROJECT_DIR$/example-cri" />
      <recent name="$PROJECT_DIR$" />
    </key>
    <key name="MoveClassesOrPackagesDialog.RECENTS_KEY">
      <recent name="uk.gov.di.mobile.wallet.cri.services.authentication" />
    </key>
    <key name="CopyClassDialog.RECENTS_KEY">
      <recent name="uk.gov.di.mobile.wallet.cri.credential.mobile_driving_licence" />
      <recent name="uk.gov.di.mobile.wallet.cri.credential.mobile_driving_licence.mdoc" />
      <recent name="uk.gov.di.mobile.wallet.cri.services.authentication" />
      <recent name="uk.gov.di.mobile.wallet.cri.credential.mobile_driving_licence.cbor" />
      <recent name="uk.gov.di.mobile.wallet.cri.models" />
    </key>
  </component>
  <component name="RubyModuleManagerSettings">
    <option name="blackListedRootsPaths">
      <list>
        <option value="$PROJECT_DIR$" />
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Jest.issueDocumentSigningCertificate handler">
    <configuration name="issueDocumentSigningCertificate handler" type="JavaScriptTestRunnerJest" temporary="true" nameIsGenerated="true">
      <node-interpreter value="project" />
      <jest-package value="$PROJECT_DIR$/doc-signing-cert/issue-document-signing-certificate/node_modules/jest" />
      <working-dir value="$PROJECT_DIR$/doc-signing-cert/issue-document-signing-certificate" />
      <envs />
      <scope-kind value="SUITE" />
      <test-file value="$PROJECT_DIR$/doc-signing-cert/issue-document-signing-certificate/tests/unit/issueDocumentSigningCertificate.test.ts" />
      <test-names>
        <test-name value="issueDocumentSigningCertificate handler" />
      </test-names>
      <method v="2" />
    </configuration>
    <configuration name="issueDocumentSigningCertificate handler.When processing starts" type="JavaScriptTestRunnerJest" temporary="true" nameIsGenerated="true">
      <node-interpreter value="project" />
      <jest-package value="$PROJECT_DIR$/doc-signing-cert/issue-document-signing-certificate/node_modules/jest" />
      <working-dir value="$PROJECT_DIR$/doc-signing-cert/issue-document-signing-certificate" />
      <envs />
      <scope-kind value="SUITE" />
      <test-file value="$PROJECT_DIR$/doc-signing-cert/issue-document-signing-certificate/tests/unit/issueDocumentSigningCertificate.test.ts" />
      <test-names>
        <test-name value="issueDocumentSigningCertificate handler" />
        <test-name value="When processing starts" />
      </test-names>
      <method v="2" />
    </configuration>
    <configuration name="issueDocumentSigningCertificate handler.When processing starts.should log a message and continue when the root certificate already exists" type="JavaScriptTestRunnerJest" temporary="true" nameIsGenerated="true">
      <node-interpreter value="project" />
      <jest-package value="$PROJECT_DIR$/doc-signing-cert/issue-document-signing-certificate/node_modules/jest" />
      <working-dir value="$PROJECT_DIR$/doc-signing-cert/issue-document-signing-certificate" />
      <envs />
      <scope-kind value="TEST" />
      <test-file value="$PROJECT_DIR$/doc-signing-cert/issue-document-signing-certificate/tests/unit/issueDocumentSigningCertificate.test.ts" />
      <test-names>
        <test-name value="issueDocumentSigningCertificate handler" />
        <test-name value="When processing starts" />
        <test-name value="should log a message and continue when the root certificate already exists" />
      </test-names>
      <method v="2" />
    </configuration>
    <configuration name="issueDocumentSigningCertificate handler.When processing starts.should log a message and upload root certificate when it doesn\'t exist" type="JavaScriptTestRunnerJest" temporary="true" nameIsGenerated="true">
      <node-interpreter value="project" />
      <jest-package value="$PROJECT_DIR$/doc-signing-cert/issue-document-signing-certificate/node_modules/jest" />
      <working-dir value="$PROJECT_DIR$/doc-signing-cert/issue-document-signing-certificate" />
      <envs />
      <scope-kind value="TEST" />
      <test-file value="$PROJECT_DIR$/doc-signing-cert/issue-document-signing-certificate/tests/unit/issueDocumentSigningCertificate.test.ts" />
      <test-names>
        <test-name value="issueDocumentSigningCertificate handler" />
        <test-name value="When processing starts" />
        <test-name value="should log a message and upload root certificate when it doesn\'t exist" />
      </test-names>
      <method v="2" />
    </configuration>
    <configuration name="issueDocumentSigningCertificate handler.When processing starts.should log and continue when the root certificate already exists" type="JavaScriptTestRunnerJest" temporary="true" nameIsGenerated="true">
      <node-interpreter value="project" />
      <jest-package value="$PROJECT_DIR$/doc-signing-cert/issue-document-signing-certificate/node_modules/jest" />
      <working-dir value="$PROJECT_DIR$/doc-signing-cert/issue-document-signing-certificate" />
      <envs />
      <scope-kind value="TEST" />
      <test-file value="$PROJECT_DIR$/doc-signing-cert/issue-document-signing-certificate/tests/unit/issueDocumentSigningCertificate.test.ts" />
      <test-names>
        <test-name value="issueDocumentSigningCertificate handler" />
        <test-name value="When processing starts" />
        <test-name value="should log and continue when the root certificate already exists" />
      </test-names>
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Jest.issueDocumentSigningCertificate handler" />
        <item itemvalue="Jest.issueDocumentSigningCertificate handler.When processing starts.should log a message and upload root certificate when it doesn\'t exist" />
        <item itemvalue="Jest.issueDocumentSigningCertificate handler.When processing starts.should log a message and continue when the root certificate already exists" />
        <item itemvalue="Jest.issueDocumentSigningCertificate handler.When processing starts.should log and continue when the root certificate already exists" />
        <item itemvalue="Jest.issueDocumentSigningCertificate handler.When processing starts" />
      </list>
    </recent_temporary>
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-jdk-9823dce3aa75-fbdcb00ec9e3-intellij.indexing.shared.core-IU-251.26094.121" />
        <option value="bundled-js-predefined-d6986cc7102b-b26f3e71634d-JavaScript-IU-251.26094.121" />
      </set>
    </attachedChunks>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="af1f21b0-7b76-437b-8874-514b94956fd2" name="Changes" comment="" />
      <created>1741362697990</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1741362697990</updated>
      <workItem from="1741362699143" duration="3899000" />
      <workItem from="1741598617654" duration="581000" />
      <workItem from="1741607323518" duration="3557000" />
      <workItem from="1741623558555" duration="10918000" />
      <workItem from="1741684580825" duration="41372000" />
      <workItem from="1741857738374" duration="7681000" />
      <workItem from="1741868257746" duration="75580000" />
      <workItem from="1742322491129" duration="12000" />
      <workItem from="1742388648793" duration="2749000" />
      <workItem from="1742464187110" duration="22179000" />
      <workItem from="1742553710366" duration="633000" />
      <workItem from="1742558625150" duration="34168000" />
      <workItem from="1742831468033" duration="172000" />
      <workItem from="1742831649492" duration="784000" />
      <workItem from="1742982026508" duration="1892000" />
      <workItem from="1742984259763" duration="286000" />
      <workItem from="1743086741192" duration="10978000" />
      <workItem from="1743174071172" duration="7270000" />
      <workItem from="1743496172602" duration="26519000" />
      <workItem from="1743582300722" duration="3367000" />
      <workItem from="1743688266714" duration="26946000" />
      <workItem from="1743759480585" duration="9787000" />
      <workItem from="1744361631955" duration="1243000" />
      <workItem from="1744363802033" duration="4679000" />
      <workItem from="1744372526604" duration="14933000" />
      <workItem from="1744619766248" duration="56160000" />
      <workItem from="1744791937458" duration="7803000" />
      <workItem from="1744804408802" duration="940000" />
      <workItem from="1744887950184" duration="30774000" />
      <workItem from="1744982125758" duration="3393000" />
      <workItem from="1747051896602" duration="1810000" />
      <workItem from="1747125597274" duration="2474000" />
      <workItem from="1747148754039" duration="3181000" />
      <workItem from="1747166421914" duration="20429000" />
      <workItem from="1747302548391" duration="1784000" />
      <workItem from="1747304349967" duration="22000" />
      <workItem from="1747304389860" duration="19932000" />
      <workItem from="1747406520927" duration="2796000" />
      <workItem from="1747661652375" duration="1967000" />
      <workItem from="1747666732044" duration="39598000" />
      <workItem from="1747989959089" duration="16181000" />
      <workItem from="1748246672474" duration="27000" />
      <workItem from="1748266777373" duration="98000" />
      <workItem from="1748272892630" duration="4000" />
      <workItem from="1748339234542" duration="69300000" />
      <workItem from="1748864356903" duration="14203000" />
      <workItem from="1748945737472" duration="52412000" />
      <workItem from="1749116891921" duration="11119000" />
      <workItem from="1749215902310" duration="7382000" />
      <workItem from="1749459514487" duration="48270000" />
      <workItem from="1749573082893" duration="25737000" />
      <workItem from="1749670011995" duration="5948000" />
      <workItem from="1749719059321" duration="4442000" />
    </task>
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="OPEN_GENERIC_TABS">
      <map>
        <entry key="f12019e6-a3e6-4929-bf7c-7c674276f6c3" value="TOOL_WINDOW" />
      </map>
    </option>
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
        <entry key="f12019e6-a3e6-4929-bf7c-7c674276f6c3">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <line-breakpoint enabled="true" type="java-line">
          <url>file://$PROJECT_DIR$/example-cri/src/test/java/uk/gov/di/mobile/wallet/cri/credential/CredentialServiceTest.java</url>
          <line>414</line>
          <option name="timeStamp" value="12" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="java-line">
          <url>file://$PROJECT_DIR$/example-cri/src/test/java/uk/gov/di/mobile/wallet/cri/credential/mobile_driving_licence/cbor/IssuerSignedCBORSerializerTest.java</url>
          <line>102</line>
          <option name="timeStamp" value="20" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="java-method">
          <url>file://$PROJECT_DIR$/example-cri/src/test/java/uk/gov/di/mobile/wallet/cri/notification/NotificationServiceTest.java</url>
          <line>144</line>
          <properties class="uk.gov.di.mobile.wallet.cri.notification.NotificationServiceTest" method="Should_LogNotification_When_RequestIsValid">
            <option name="EMULATED" value="true" />
            <option name="WATCH_EXIT" value="false" />
          </properties>
          <option name="timeStamp" value="8" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="java-method">
          <url>file://$PROJECT_DIR$/example-cri/src/test/java/uk/gov/di/mobile/wallet/cri/credential/CredentialServiceTest.java</url>
          <line>217</line>
          <properties class="uk.gov.di.mobile.wallet.cri.credential.CredentialServiceTest" method="Should_Throw_CredentialServiceException_When_CredentialBuilderThrowsSigningException">
            <option name="EMULATED" value="true" />
            <option name="WATCH_EXIT" value="false" />
          </properties>
          <option name="timeStamp" value="13" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="java-method">
          <url>file://$PROJECT_DIR$/example-cri/src/test/java/uk/gov/di/mobile/wallet/cri/credential/CredentialServiceTest.java</url>
          <line>372</line>
          <properties class="uk.gov.di.mobile.wallet.cri.credential.CredentialServiceTest">
            <option name="EMULATED" value="true" />
            <option name="WATCH_EXIT" value="false" />
          </properties>
          <option name="timeStamp" value="17" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="javascript">
          <url>file://$PROJECT_DIR$/doc-signing-cert/issue-document-signing-certificate/tests/unit/issueDocumentSigningCertificate.test.ts</url>
          <line>137</line>
          <option name="timeStamp" value="25" />
        </line-breakpoint>
      </breakpoints>
    </breakpoint-manager>
  </component>
</project>