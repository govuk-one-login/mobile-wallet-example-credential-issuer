AWSTemplateFormatVersion: "2010-09-09"

Transform:
  - AWS::Serverless-2016-10-31
Description: >-
  Wallet Stub BE
Parameters:
  Environment:
    Description: "The environment type"
    Type: "String"
    Default: dev
    AllowedValues:
      - "dev"
      - "build"
      - "staging"
  VpcStackName:
    Description: >
      The name of the stack that defines the VPC in which this container will run.
    Type: String
    Default: platform-vpc
  PermissionsBoundary:
    Description: "The ARN of the permissions boundary to apply when creating IAM roles"
    Type: String
    Default: "none"
  ContainerPort:
    Description: >
      The port on which the container is running
    Type: Number
    Default: 8080
  DocumentBuilderStackName:
    Description: The cloudformation stack name of the Document Builder.
    Type: String
    Default: "wallet-doc-builder-fe"
  DocumentSigningCertificateIssuerStackName:
    Type: String
    Description: >
      The stack name of the Document Signing Certificate Issuer.
    Default: "wallet-dsc-issuer"

Conditions:
  StackNameIsWalletCredIssuerBE: !Equals [!Ref "AWS::StackName", wallet-cred-issuer-be]

  IsBuildOrStaging: !Or
    - !Equals [!Ref Environment, build]
    - !Equals [!Ref Environment, staging]

  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"

Mappings:
  EnvironmentVariables:
    dev:
      SelfUrl: "example-credential-issuer.mobile.dev.account.gov.uk"
      CredentialStoreUrl: "stub-credential-issuer.mobile.dev.account.gov.uk"
      AuthServerUrl: "stub-credential-issuer.mobile.dev.account.gov.uk"
      WalletAppDeepLinkUrl: "mobile.dev.account.gov.uk/wallet"
      BackImageRepository: arn:aws:ecr:eu-west-2:671524980203:repository/wallet-cred-issuer-be-ecr-containerrepository-ta87rf6hloli
      CertificatesBucketName: "wallet-dsc-issuer-671524980203-certificates"
      DocumentSigningKey1Arn: arn:aws:kms:eu-west-2:671524980203:key/72b0ed1b-9fa6-43ae-ba8f-14693868ce72
      CertificateAuthorityArn: arn:aws:acm-pca:eu-west-2:671524980203:certificate-authority/1c589b25-0433-45e0-b7d9-911fe33a9c1a
    build:
      SelfUrl: "example-credential-issuer.mobile.build.account.gov.uk"
      CredentialStoreUrl: "stub-credential-issuer.mobile.build.account.gov.uk"
      AuthServerUrl: "stub-credential-issuer.mobile.build.account.gov.uk"
      WalletAppDeepLinkUrl: "mobile.build.account.gov.uk/wallet"
      BackImageRepository: arn:aws:ecr:eu-west-2:497065468681:repository/wallet-cred-issuer-be-ecr-containerrepository-ikbt4gtnl9ew
      CertificatesBucketName: "wallet-dsc-issuer-497065468681-certificates"
      DocumentSigningKey1Arn: arn:aws:kms:eu-west-2:497065468681:key/125a9328-f653-4f8a-bf0b-ad53acbfdf78
      CertificateAuthorityArn: arn:aws:acm-pca:eu-west-2:497065468681:certificate-authority/80334954-bf3b-4e15-bbeb-ce801c4e36fa
    staging:
      SelfUrl: "example-credential-issuer.mobile.staging.account.gov.uk"
      CredentialStoreUrl: "stub-credential-issuer.mobile.staging.account.gov.uk"
      AuthServerUrl: "token.staging.account.gov.uk"
      WalletAppDeepLinkUrl: "mobile.staging.account.gov.uk/wallet"
      BackImageRepository: arn:aws:ecr:eu-west-2:497065468681:repository/wallet-cred-issuer-be-ecr-containerrepository-ikbt4gtnl9ew
      CertificatesBucketName: "wallet-dsc-issuer-497065468681-certificates"
      DocumentSigningKey1Arn: arn:aws:kms:eu-west-2:497065468681:key/125a9328-f653-4f8a-bf0b-ad53acbfdf78
      CertificateAuthorityArn: arn:aws:acm-pca:eu-west-2:497065468681:certificate-authority/80334954-bf3b-4e15-bbeb-ce801c4e36fa
  ElasticLoadBalancerAccountIds:
    eu-west-2:
      AccountId: 652711504416

Resources:

  # SECURITY GROUPS

  WalletBELoadBalancerSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: >-
        Wallet Stub BE LoadBalancer Security Group
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-VpcId"

  WalletBELoadBalancerSGEgressToECSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId: !GetAtt WalletBELoadBalancerSG.GroupId
      IpProtocol: tcp
      Description: >-
        Egress between the Wallet Stub BE load balancer and the Wallet Stub BE ECS security group
      DestinationSecurityGroupId: !GetAtt WalletBEECSSecurityGroup.GroupId
      FromPort: !Ref ContainerPort
      ToPort: !Ref ContainerPort

  WalletBEECSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: >-
        Wallet Stub BE ECS Security Group permitting outbound to anywhere.
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: '-1'
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-VpcId"

  WalletBEECSSecurityGroupIngressFromLoadBalancer:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: tcp
      Description: >-
        Wallet Stub BE ECS permits inbound from the Wallet Stub BE load balancer.
      FromPort: !Ref ContainerPort
      ToPort: !Ref ContainerPort
      GroupId: !GetAtt WalletBEECSSecurityGroup.GroupId
      SourceSecurityGroupId: !GetAtt WalletBELoadBalancerSG.GroupId

  # ACCESS LOGS

  WalletBEAPIGWAccessLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/${AWS::StackName}-WalletBE-API-GW-AccessLogs
      RetentionInDays: 14

  WalletBEECSAccessLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/ecs/${AWS::StackName}-Wallet-Stub-Back-ECS
      RetentionInDays: 14

  WalletBEECSAccessLogsGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsBuildOrStaging
    Properties:
      DestinationArn: arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython-2
      FilterPattern: ""
      LogGroupName: !Ref WalletBEECSAccessLogsGroup

  WalletBEAccessLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub wallet-stub-back-${AWS::StackName}-${Environment}-access-logs
      VersioningConfiguration:
        Status: "Enabled"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  WalletBEAccessLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WalletBEAccessLogsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub
                - "arn:aws:iam::${ElbAccountId}:root"
                - ElbAccountId: !FindInMap [ElasticLoadBalancerAccountIds, !Ref 'AWS::Region', AccountId]
            Action:
              - s3:PutObject
            Resource:
              - !Sub arn:aws:s3:::${WalletBEAccessLogsBucket}/wallet-stub-back-${Environment}/AWSLogs/${AWS::AccountId}/*
          - Effect: Deny
            Principal:
              AWS: "*"
            Action: "*"
            Resource: !Sub
              - arn:aws:s3:::${bucketName}/*
              - bucketName: !Ref WalletBEAccessLogsBucket
            Condition:
              Bool:
                "aws:SecureTransport": false

  # LOADBALANCER RESOURCES

  WalletBELoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internal
      SecurityGroups:
        - !GetAtt WalletBELoadBalancerSG.GroupId
      Subnets:
        - Fn::ImportValue: !Sub "${VpcStackName}-PrivateSubnetIdA"
        - Fn::ImportValue: !Sub "${VpcStackName}-PrivateSubnetIdB"
        - Fn::ImportValue: !Sub "${VpcStackName}-PrivateSubnetIdC"
      Type: application
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value: !Ref WalletBEAccessLogsBucket
        - Key: access_logs.s3.prefix
          Value: !Sub wallet-stub-back-${Environment}
        - Key: idle_timeout.timeout_seconds
          Value: 60 # N.B, this is 1 second less than the nodeJS app is configured in server.ts

  WalletBELoadBalancerListenerTargetGroupECS:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckEnabled: TRUE
      HealthCheckProtocol: HTTP
      HealthCheckPath: "/healthcheck"
      HealthCheckTimeoutSeconds: 2
      HealthCheckIntervalSeconds: 60
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-499
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-VpcId"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60

  WalletBELoadBalancerListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref WalletBELoadBalancerListenerTargetGroupECS
          Type: forward
      LoadBalancerArn: !Ref WalletBELoadBalancer
      Port: 80
      Protocol: HTTP

  # APIGW RESOURCES

  WalletBEApiGwHttpEndpoint:
    Type: 'AWS::ApiGatewayV2::Api'
    Properties:
      Name: !Sub wallet-stub-Back-${Environment}-${AWS::StackName}
      Description: !Sub "Wallet Stub Backend API. ${AWS::StackName}"
      ProtocolType: HTTP

  WalletBEApiGwHttpEndpointIntegration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      ApiId: !Ref WalletBEApiGwHttpEndpoint
      IntegrationType: HTTP_PROXY
      ConnectionId:
        Fn::ImportValue: !Sub "${VpcStackName}-VpcLinkId"
      ConnectionType: VPC_LINK
      IntegrationMethod: ANY
      IntegrationUri: !Ref WalletBELoadBalancerListener
      PayloadFormatVersion: '1.0'
      RequestParameters:
        overwrite:header.x-govuk-signin-source-ip: $context.identity.sourceIp

  WalletBEAPIGWRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    Properties:
      ApiId: !Ref WalletBEApiGwHttpEndpoint
      RouteKey: 'ANY /{proxy+}'
      Target: !Join
        - /
        - - integrations
          - !Ref WalletBEApiGwHttpEndpointIntegration

  WalletBEAPIStageDefault:
    Type: 'AWS::ApiGatewayV2::Stage'
    Properties:
      ApiId: !Ref WalletBEApiGwHttpEndpoint
      StageName: $default
      AutoDeploy: true
      DefaultRouteSettings:
        DataTraceEnabled: false
        DetailedMetricsEnabled: true
        ThrottlingBurstLimit: 400
        ThrottlingRateLimit: 1200
      AccessLogSettings:
        DestinationArn: !GetAtt WalletBEAPIGWAccessLogsGroup.Arn
        Format: >-
          { "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod", "path": "$context.path", "routeKey":"$context.routeKey", "status":"$context.status", "protocol":"$context.protocol", "responseLength":"$context.responseLength" }

  WalletBECustomDomain:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: !If
        - StackNameIsWalletCredIssuerBE
        - !FindInMap [EnvironmentVariables, !Ref Environment, SelfUrl]
        - !Sub
          - "${AWS::StackName}-${SelfUrl}"
          - SelfUrl: !FindInMap [EnvironmentVariables, !Ref Environment, SelfUrl]
      DomainNameConfigurations:
        - CertificateArn: !Sub "{{resolve:ssm:/${Environment}/Platform/ACM/PrimaryZoneWildcardCertificateARN}}"
          EndpointType: REGIONAL
          SecurityPolicy: TLS_1_2

  WalletBEApiRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref WalletBECustomDomain
      Type: A
      HostedZoneId: !Sub "{{resolve:ssm:/${Environment}/Platform/Route53/PrimaryZoneID}}"
      AliasTarget:
        DNSName: !GetAtt WalletBECustomDomain.RegionalDomainName
        HostedZoneId: !GetAtt WalletBECustomDomain.RegionalHostedZoneId
        EvaluateTargetHealth: false

  WalletBEApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      DomainName: !Ref WalletBECustomDomain
      ApiId: !Ref WalletBEApiGwHttpEndpoint
      Stage: !Ref WalletBEAPIStageDefault

  # ECS RESOURCES

  WalletBECluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-WalletECSCluster"
        - Key: Product
          Value: "GOV.UK sign in"
        - Key: System
          Value: "Wallet Stub BE"
        - Key: Environment
          Value: !Sub "${Environment}"

  WalletBEECSService:
    DependsOn:
      - WalletBELoadBalancerListener
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref WalletBECluster
      DeploymentConfiguration:
        DeploymentCircuitBreaker:
          Enable: TRUE
          Rollback: TRUE
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: app
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref WalletBELoadBalancerListenerTargetGroupECS
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !GetAtt WalletBEECSSecurityGroup.GroupId
          Subnets:
            - Fn::ImportValue: !Sub "${VpcStackName}-ProtectedSubnetIdA"
            - Fn::ImportValue: !Sub "${VpcStackName}-ProtectedSubnetIdB"
            - Fn::ImportValue: !Sub "${VpcStackName}-ProtectedSubnetIdC"
      TaskDefinition: !Ref WalletBEECSServiceTaskDefinition
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-WalletECS"
        - Key: Product
          Value: "GOV.UK sign in"
        - Key: System
          Value: "Wallet BE Stub"
        - Key: Environment
          Value: !Sub "${Environment}"

  #  The ECR container for overriding in development, if you want to target a specific version/tag
  #  for development use, change the value of the 'Image' property value to:
  #  "671524980203.dkr.ecr.eu-west-2.amazonaws.com/wallet-cred-issuer-be-ecr-containerrepository-ta87rf6hloli:<image_tag>"
  #  To deploy the latest version of the image, use the git sha from the most recent commit, as the <image tag>, found using ‘git log’

  WalletBEECSServiceTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: CONTAINER-IMAGE-PLACEHOLDER
          Name: app
          Environment:
            - Name: SIGNING_KEY_ALIAS
              Value: !Ref CredentialIssuerSigningKeyAlias
            - Name: AWS_REGION
              Value: !Sub "${AWS::Region}"
            - Name: ENVIRONMENT
              Value: !Sub "${Environment}"
            - Name: SELF_URL
              Value: !If
                - StackNameIsWalletCredIssuerBE
                - !Sub
                  - "https://${SelfUrl}"
                  - SelfUrl: !FindInMap [EnvironmentVariables, !Ref Environment, SelfUrl]
                - !Sub
                  - "https://${AWS::StackName}-${SelfUrl}"
                  - SelfUrl: !FindInMap [EnvironmentVariables, !Ref Environment, SelfUrl]
            - Name: DID_CONTROLLER
              Value: !If
                - StackNameIsWalletCredIssuerBE
                - !FindInMap [EnvironmentVariables, !Ref Environment, SelfUrl]
                - !Sub
                  - "${AWS::StackName}-${SelfUrl}"
                  - SelfUrl: !FindInMap [EnvironmentVariables, !Ref Environment, SelfUrl]
            - Name: OIDC_CLIENT_ID
              Value: !Sub "{{resolve:ssm:/${DocumentBuilderStackName}/Config/OIDC/Client/Id}}"
            - Name: CREDENTIAL_STORE_URL
              Value: !Sub
                - "https://${CredentialStoreUrl}"
                - CredentialStoreUrl: !FindInMap [EnvironmentVariables, !Ref Environment, CredentialStoreUrl]
            - Name: WALLET_APP_DEEP_LINK_URL
              Value: !Sub
                - "https://${WalletAppDeepLinkUrl}"
                - WalletAppDeepLinkUrl: !FindInMap [EnvironmentVariables, !Ref Environment, WalletAppDeepLinkUrl]
            - Name: CREDENTIAL_OFFER_CACHE
              Value: !Ref CRICacheDatabase
            - Name: ONE_LOGIN_AUTH_SERVER_URL
              Value: !Sub
                - "https://${AuthServerUrl}"
                - AuthServerUrl: !FindInMap [EnvironmentVariables, !Ref Environment, AuthServerUrl]
            - Name: CERTIFICATE_AUTHORITY_ARN
              Value: !FindInMap [EnvironmentVariables, !Ref Environment, CertificateAuthorityArn]
            - Name: CERTIFICATES_BUCKET_NAME
              Value: !FindInMap [EnvironmentVariables, !Ref Environment, CertificatesBucketName]
            - Name: DOCUMENT_SIGNING_KEY_1_ARN
              Value: !FindInMap [EnvironmentVariables, !Ref Environment, DocumentSigningKey1Arn]

          PortMappings:
            - ContainerPort: !Ref ContainerPort
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref WalletBEECSAccessLogsGroup
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: !Sub wallet-stub-back-${Environment}
      Cpu: '1024' # Increased to use 1 CPU unit
      ExecutionRoleArn: !GetAtt WalletBEECSTaskExecutionRole.Arn
      Memory: '2048' # Upgraded memory value to match with increased CPU
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt WalletBEECSTaskRole.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-WalletTaskDefinition"
        - Key: Product
          Value: "GOV.UK sign in"
        - Key: System
          Value: "Wallet Stub BE"
        - Key: Environment
          Value: !Sub "${Environment}"

  WalletBEECSTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyName: PullWalletBackImage
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:BatchGetImage"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchCheckLayerAvailability"
                Resource:
                  - !FindInMap [EnvironmentVariables, !Ref Environment, BackImageRepository]
              - Effect: Allow
                Action:
                  - "ecr:GetAuthorizationToken"
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !GetAtt "WalletBEECSAccessLogsGroup.Arn"
                  - !Sub "${WalletBEECSAccessLogsGroup.Arn}:*"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  WalletBEECSTaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyName: AccessDynamoDb
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:UpdateItem'
                Resource: !GetAtt CRICacheDatabase.Arn
              - Effect: Allow
                Action:
                  - 'kms:Decrypt'
                  - 'kms:Encrypt'
                  - 'kms:GenerateDataKey'
                Resource: !GetAtt CRICacheDatabaseKmsKey.Arn
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource:
                  - !Sub
                    - 'arn:aws:s3:::${BucketName}'
                    - BucketName: !FindInMap [EnvironmentVariables, !Ref Environment, CertificatesBucketName]
                  - !Sub
                    - 'arn:aws:s3:::${BucketName}/*'
                    - BucketName: !FindInMap [EnvironmentVariables, !Ref Environment, CertificatesBucketName]
              - Effect: Allow
                Action:
                  - 'kms:Sign'
                  - 'kms:DescribeKey'
                Resource:
                  - !FindInMap [EnvironmentVariables, !Ref Environment, DocumentSigningKey1Arn]
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  # KMS RESOURCES

  CredentialIssuerSigningKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Asymmetric key for signing tokens
      Enabled: true
      EnableKeyRotation: false
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action:
              - "kms:*"
            Resource:
              - "*"
          - Effect: Allow
            Principal:
              AWS: !GetAtt WalletBEECSTaskRole.Arn
            Action:
              - "kms:Sign"
              - "kms:GetPublicKey"
              - "kms:DescribeKey"
            Resource:
              - "*"
      KeySpec: ECC_NIST_P256
      KeyUsage: SIGN_VERIFY
      MultiRegion: false

  CredentialIssuerSigningKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/credential-signing-key-${AWS::StackName}"
      TargetKeyId: !Ref CredentialIssuerSigningKey

  CRICacheDatabaseKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource:
              - "*"

  CRICacheDatabaseKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}/${Environment}/CRICacheDatabaseKmsKey"
      TargetKeyId: !Ref CRICacheDatabaseKmsKey

  # DYNAMODB RESOURCES

  CRICacheDatabase:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      AttributeDefinitions:
        - AttributeName: credentialIdentifier
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      TableName: !Sub "${AWS::StackName}-credential_offer_cache"
      KeySchema:
        - AttributeName: credentialIdentifier
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: timeToLive
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !GetAtt CRICacheDatabaseKmsKey.Arn
      Tags:
        - Key: Product
          Value: GOV.UK Sign In
        - Key: System
          Value: Mobile Wallet
        - Key: Owner
          Value: Mobile Wallet Team
        - Key: Environment
          Value: !Ref "Environment"

  CRICredentialDatabase:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      AttributeDefinitions:
        - AttributeName: credentialIdentifier
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      TableName: !Sub "${AWS::StackName}-credential_store"
      KeySchema:
        - AttributeName: credentialIdentifier
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: timeToLive
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !GetAtt CRICacheDatabaseKmsKey.Arn
      Tags:
        - Key: Product
          Value: GOV.UK Sign In
        - Key: System
          Value: Mobile Wallet
        - Key: Owner
          Value: Mobile Wallet Team
        - Key: Environment
          Value: !Ref "Environment"

  # ALARMS

  ExampleCredIssuerLowContainerTaskCountAlarm:
    Condition: IsBuildOrStaging
    DependsOn:
      - WalletBECluster
      - WalletBEECSService
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-EgCredIssuerLowContainerTaskCountAlarm"
      AlarmDescription: Trigger a warning if the running container task count drops below 1
      ActionsEnabled: false
      # OKActions: - commented until we create sns topics for wallet alarms
      #   - !ImportValue platform-alarm-topic-critical-alert
      # AlarmActions:
      #   - !ImportValue platform-alarm-topic-critical-alert
      InsufficientDataActions: []
      Dimensions: []
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 1
      ComparisonOperator: LessThanThreshold
      TreatMissingData: breaching
      Metrics:
        - Id: containerTaskCount
          ReturnData: true
          MetricStat:
            Metric:
              Namespace: ECS/ContainerInsights
              MetricName: RunningTaskCount
              Dimensions:
                - Name: ClusterName
                  Value: !Ref WalletBECluster
                - Name: ServiceName
                  Value: !GetAtt WalletBEECSService.Name
            Period: 60
            Stat: Minimum

  FE4XXErrorAlarm:
    Condition: IsBuildOrStaging
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-FE4XXErrorAlarm"
      AlarmDescription: Trigger the alarm if errorThreshold exceeds 50% with a minimum of 5 invocations in the last 30 minutes
      ActionsEnabled: false
      # OKActions:
      #   - !ImportValue platform-alarm-topic-slack-warning-alert
      # AlarmActions:
      #   - !ImportValue platform-alarm-topic-slack-warning-alert
      InsufficientDataActions: []
      Dimensions: []
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 50
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: errorThreshold
          Label: errorThreshold
          ReturnData: true
          Expression: IF(invocations<5,0,errorPercentage)
        - Id: invocations
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Count
              Dimensions:
                - Name: ApiId
                  Value: !Ref WalletBEApiGwHttpEndpoint
            Period: 1800
            Stat: Sum
        - Id: error
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: 4xx
              Dimensions:
                - Name: ApiId
                  Value: !Ref WalletBEApiGwHttpEndpoint
            Period: 1800
            Stat: Sum
        - Id: errorPercentage
          Label: errorPercentage
          ReturnData: false
          Expression: (error/invocations) * 100

Outputs:
  CredIssuerFriendlyUrl:
    Description: Friendly URL for the deployed credential issuer service
    Value: !If
      - StackNameIsWalletCredIssuerBE
      - !FindInMap [EnvironmentVariables, !Ref Environment, SelfUrl]
      - !Sub
        - "${AWS::StackName}-${SelfUrl}"
        - SelfUrl: !FindInMap [EnvironmentVariables, !Ref Environment, SelfUrl]
