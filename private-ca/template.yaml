AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  private-ca

  Sample SAM Template for private-ca

Resources:
  RootCA:
    Type: AWS::ACMPCA::CertificateAuthority
    DependsOn: CRLBucketPolicy
    Properties:
      Type: ROOT
      KeyAlgorithm: EC_prime256v1
      SigningAlgorithm: SHA256WITHECDSA
      Subject:
        Country: UK
#        Organization: string
#        OrganizationalUnit: string
#        DistinguishedNameQualifier: string
#        State: string
        CommonName: 'mDL IACA Root'
#        SerialNumber: string
#        Locality: string
#        Title: string
#        Surname: string
#        GivenName: string
#        Initials: DG
#        Pseudonym: string
#        GenerationQualifier: DBG
      RevocationConfiguration:
        OcspConfiguration:
          Enabled: true
        CrlConfiguration:
          Enabled: true
          CrlType: COMPLETE
          CustomCname: !GetAtt CRLDistribution.DomainName
          S3ObjectAcl: BUCKET_OWNER_FULL_CONTROL
          S3BucketName: !Ref CRLBucket
          ExpirationInDays: 2

  CRLBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-${AWS::AccountId}-crl"
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  CRLBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CRLBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowPrivateCAPrincipalReadWrite
            Action:
              - s3:PutObject
              - s3:PutObjectAcl
              - s3:GetBucketAcl
              - s3:GetBucketLocation
            Effect: Allow
            Resource:
              - !Sub "arn:aws:s3:::${AWS::StackName}-${AWS::AccountId}-crl"
              - !Sub "arn:aws:s3:::${AWS::StackName}-${AWS::AccountId}-crl/*"
            Principal:
              Service: acm-pca.amazonaws.com
            Condition:
              StringEquals:
                "aws:SourceAccount": !Ref AWS::AccountId
          - Sid: AllowCloudFrontServicePrincipalReadOnly
            Action:
              - s3:GetObject
            Resource:
              - !Sub "arn:aws:s3:::${AWS::StackName}-${AWS::AccountId}-crl/*"
            Principal:
              Service: cloudfront.amazonaws.com
            Effect: Allow
            Condition:
              StringEquals:
                "AWS:SourceArn": !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CRLDistribution}"

  CRLOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${AWS::StackName}-crl-bucket"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CRLDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: !Sub "${AWS::StackName} CRL Cloudfront Distribution"
        DefaultRootObject: index.html
        HttpVersion: http1.1
        Origins:
          - DomainName: !Sub "${CRLBucket}.s3.${AWS::Region}.amazonaws.com"
            Id: bucketOrigin
            OriginAccessControlId: !Ref CRLOriginAccessControl
            S3OriginConfig:
              OriginAccessIdentity: ""
        DefaultCacheBehavior:
          CachedMethods:
            - GET
            - HEAD
          AllowedMethods:
            - GET
            - HEAD
          TargetOriginId: bucketOrigin
          CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad"  # see https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html#managed-cache-policy-caching-disabled
          ViewerProtocolPolicy: allow-all
        PriceClass: PriceClass_All
#        Logging:
#          Bucket: !Sub "${LoggingBucket}.s3.amazonaws.com"
#          IncludeCookies: false
#          Prefix: ""

  RootCACertificate:
    Type: AWS::ACMPCA::Certificate
    Properties:
      CertificateAuthorityArn:
        Ref: RootCA
      CertificateSigningRequest:
        Fn::GetAtt:
          - RootCA
          - CertificateSigningRequest
      SigningAlgorithm: SHA256WITHECDSA
      TemplateArn: arn:aws:acm-pca:::template/BlankRootCACertificate_PathLen0_APIPassthrough/V1
      Validity:
        Type: DAYS
        Value: 3285  # 9 years
      ApiPassthrough:
        Extensions:
          CustomExtensions:
            - ObjectIdentifier: "2.5.29.31"
              Value: "MEgwRqBEoEKGQGh0dHA6Ly9leGFtcGxlLmNvbS9jcmwvMDExNnoxMjMtZHY3YS01OWIxLXg3YmUtMTIzMXY3MjU3MTEzNi5jcmw="
          KeyUsage:
            KeyCertSign: true
            CRLSign: true

  RootCAActivation:
    Type: AWS::ACMPCA::CertificateAuthorityActivation
    Properties:
      CertificateAuthorityArn:
        Ref: RootCA
      Certificate:
        Fn::GetAtt:
          - RootCACertificate
          - Certificate
      Status: ACTIVE

  DocumentSigningKey:
    Type: AWS::KMS::Key
    Properties:
      KeySpec: ECC_NIST_P256
      KeyUsage: SIGN_VERIFY
      Description: !Sub "Example Document Signing Key for ${AWS::StackName}"
      Enabled: true
      PendingWindowInDays: 7

  DocumentSigningKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}-doc-signing-key"
      TargetKeyId: !Ref DocumentSigningKey

  DocumentSigningKey2:
    Type: AWS::KMS::Key
    Properties:
      KeySpec: ECC_NIST_P256
      KeyUsage: SIGN_VERIFY
      Description: !Sub "Example Document Signing Key 2 for ${AWS::StackName}"
      Enabled: true
      PendingWindowInDays: 7

  DocumentSigningKey2Alias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}-doc-signing-key2"
      TargetKeyId: !Ref DocumentSigningKey

  DocumentSigningKey3:
    Type: AWS::KMS::Key
    Properties:
      KeySpec: ECC_NIST_P256
      KeyUsage: SIGN_VERIFY
      Description: !Sub "Example Document Signing Key 3 for ${AWS::StackName}"
      Enabled: true
      PendingWindowInDays: 7

  DocumentSigningKey3Alias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}-doc-signing-key3"
      TargetKeyId: !Ref DocumentSigningKey

Outputs:
  RootCertificate:
    Value:
      Fn::GetAtt:
        - RootCAActivation
        - CompleteCertificateChain
  RootCertificateArn:
    Value:
      Fn::GetAtt:
        - RootCACertificate
        - Arn
  CRLDistributionPoint:
    Value:
      Fn::Base64:
        Fn::Sub:
          - "http://${domain}/crl/${ca_id}.crl"
          - domain: !GetAtt CRLDistribution.DomainName
            ca_id:
              Fn::Select:
                - 1
                - Fn::Split:
                    - "/"
                    - !GetAtt RootCA.Arn
