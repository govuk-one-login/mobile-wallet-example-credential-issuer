AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  private-ca

  Sample SAM Template for private-ca

Resources:
  RootCA:
    Type: AWS::ACMPCA::CertificateAuthority
    Properties:
      Type: ROOT
      KeyAlgorithm: EC_prime256v1
      SigningAlgorithm: SHA256WITHECDSA
      Subject:
        Country: UK
#        Organization: string
#        OrganizationalUnit: string
#        DistinguishedNameQualifier: string
#        State: string
        CommonName: 'mDL IACA Root'
#        SerialNumber: string
#        Locality: string
#        Title: string
#        Surname: string
#        GivenName: string
#        Initials: DG
#        Pseudonym: string
#        GenerationQualifier: DBG
      RevocationConfiguration:
        OcspConfiguration:
          Enabled: true
        CrlConfiguration:
          Enabled: true
          S3ObjectAcl: BUCKET_OWNER_FULL_CONTROL
          S3BucketName: !Ref CRL
          ExpirationInDays: 7

  CRL:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-${AWS::AccountId}-crl"
      VersioningConfiguration:
        Status: "Enabled"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  CRLBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CRL
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - s3:PutObject
              - s3:PutObjectAcl
              - s3:GetBucketAcl
              - s3:GetBucketLocation
            Effect: Allow
            Resource:
              - !Sub "arn:aws:s3:::${AWS::StackName}-${AWS::AccountId}-crl"
              - !Sub "arn:aws:s3:::${AWS::StackName}-${AWS::AccountId}-crl/*"
            Principal:
              Service: acm-pca.amazonaws.com
            Condition:
              StringEquals:
                "aws:SourceAccount": !Ref AWS::AccountId

  NoCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Comment: No caching
        DefaultTTL: 0
        MinTTL: 0
        MaxTTL: 0
        Name: NoCache
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingGzip: false
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: none

  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref AWS::StackName

  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: 'true'
        Comment: !Sub "${AWS::StackName} CRL Cloudfront Distribution"
#        DefaultRootObject: !Ref IndexDocument
        HttpVersion: http2
#        CustomErrorResponses:
#          - ErrorCachingMinTTL: 86400
#            ErrorCode: 403 # object not found in bucket
#            ResponseCode: 404
#            ResponsePagePath: !Sub "/${ErrorDocument}"
        Origins:
          - DomainName: !Sub "${CRL}.s3.${AWS::Region}.amazonaws.com"
            Id: bucketOrigin
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${OriginAccessIdentity}
        DefaultCacheBehavior:
          Compress: false
          CachedMethods:
            - GET
            - HEAD
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - PATCH
            - POST
            - DELETE
          TargetOriginId: bucketOrigin
          CachePolicyId: !Ref NoCachePolicy
          ViewerProtocolPolicy: https-only
          OriginRequestPolicyId: !Ref DistributionPolicy
#        PriceClass: !Ref CloudFrontPriceClass
#        Logging:
#          Bucket: !Sub "${LoggingBucket}.s3.amazonaws.com"
#          IncludeCookies: false
#          Prefix: ""

  DistributionPolicy:
    Type: AWS::CloudFront::OriginRequestPolicy
    Properties:
      OriginRequestPolicyConfig:
        CookiesConfig:
          CookieBehavior: all
        HeadersConfig:
          HeaderBehavior: allViewer
        Name: passthrough
        QueryStringsConfig:
          QueryStringBehavior: all

#  DistributionMonitoringSubscription:
#    Type: AWS::CloudFront::MonitoringSubscription
#    Properties:
#      DistributionId: !Ref Distribution
#      MonitoringSubscription:
#        RealtimeMetricsSubscriptionConfig:
#          RealtimeMetricsSubscriptionStatus: "Enabled"

  RootCACertificate:
    Type: AWS::ACMPCA::Certificate
    Properties:
      CertificateAuthorityArn:
        Ref: RootCA
      CertificateSigningRequest:
        Fn::GetAtt:
          - RootCA
          - CertificateSigningRequest
      SigningAlgorithm: SHA256WITHECDSA
      TemplateArn: arn:aws:acm-pca:::template/BlankRootCACertificate_PathLen0_APIPassthrough/V1
      Validity:
        Type: DAYS
        Value: 3285  # 9 years
      ApiPassthrough:
        Extensions:
          CustomExtensions:
            - ObjectIdentifier: "2.5.29.31"
              Value: "MEgwRqBEoEKGQGh0dHA6Ly9leGFtcGxlLmNvbS9jcmwvMDExNnoxMjMtZHY3YS01OWIxLXg3YmUtMTIzMXY3MjU3MTEzNi5jcmw="
          KeyUsage:
            KeyCertSign: true
            CRLSign: true

  RootCAActivation:
    Type: AWS::ACMPCA::CertificateAuthorityActivation
    Properties:
      CertificateAuthorityArn:
        Ref: RootCA
      Certificate:
        Fn::GetAtt:
          - RootCACertificate
          - Certificate
      Status: ACTIVE

  DocumentSigningKey:
    Type: AWS::KMS::Key
    Properties:
      KeySpec: ECC_NIST_P256
      KeyUsage: SIGN_VERIFY
      Description: !Sub "Example Document Signing Key for ${AWS::StackName}"
      Enabled: true
      PendingWindowInDays: 7

  DocumentSigningKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}-doc-signing-key"
      TargetKeyId: !Ref DocumentSigningKey

  DocumentSigningKey2:
    Type: AWS::KMS::Key
    Properties:
      KeySpec: ECC_NIST_P256
      KeyUsage: SIGN_VERIFY
      Description: !Sub "Example Document Signing Key 2 for ${AWS::StackName}"
      Enabled: true
      PendingWindowInDays: 7

  DocumentSigningKey2Alias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}-doc-signing-key2"
      TargetKeyId: !Ref DocumentSigningKey

Outputs:
  RootCertificate:
    Value:
      Fn::GetAtt:
        - RootCAActivation
        - CompleteCertificateChain
  RootCertificateArn:
    Value:
      Fn::GetAtt:
        - RootCACertificate
        - Arn
